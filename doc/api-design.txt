api-design.txt
CS 257 Software Design
Essy, Raquel, Rui, 23 April 2025
Modified by Raquel and Rui, 10 May, 2025

REQUEST: /characters
GET parameters
   name (Optional, default: '') -- return only characters whose name matches the specified string, case-insensitively

   house (Optional, default: '') -- return only characters from the specified house, case-insensitively

   blood_status (Optional, default: '') --return only characters who has the specified blood_status, case-insensitively 

   species (Optional, default: '') --return only characters of a specified species, case-insensitively

   number (Optional, default: 100) -- return only the specified amount of characters from the list of characters matched the parameters

RESPONSE:
A list of character, sorted alphabetically by first name of characters.
Each character is a JSON object with keys:
   - blood_status, gender, hair_color, house, id, name, patronous, species, wand
Example:
   request: localhost:5122/characters?species=human&blood_status=Pure-blood&limit=3&house=Slytherin&name=Malfoy
   response:[
               {
                  "blood_status": "Pure-blood",
                  "gender": "Male",
                  "hair_color": "White-blond",
                  "house": "Slytherin",
                  "id": 47,
                  "name": "Draco Malfoy",
                  "patronus": "Unknown",
                  "species": "Human",
                  "wand": "10\" Hawthorn unicorn hair"
               },
               {
                  "blood_status": "Pure-blood",
                  "gender": "Male",
                  "hair_color": "White-blond",
                  "house": "Slytherin",
                  "id": 53,
                  "name": "Lucius Malfoy",
                  "patronus": "Unknown",
                  "species": "Human",
                  "wand": "Elm and dragon heartstring"
               },
               {
                  "blood_status": "Pure-blood",
                  "gender": "Female",
                  "hair_color": "Blonde",
                  "house": "Slytherin",
                  "id": 54,
                  "name": "Narcissa Malfoy",
                  "patronus": "Unknown",
                  "species": "Human",
                  "wand": "Unknown"
               }
               ]

REQUEST: /spells
GET parameters
   name (Optional, default: '') -- returns spells with names associated with input string, case insensitively
   type (Optional, default: '') -- return spells of the specified type, case insensitively
   effect (Optional, default: '') -- return spells with effects associated with input string, case insensitively
   light (Optional, default: '') -- return spells of specified light, case insensitively
   
RESPONSE:
A list of spells matching the specified GET parameters, sorted alphabetically by the spells' names.
Each spell is a JSON object with keys:
   - effect, id, incantation, light, name, type
Example:
   request:localhost:5122/spells?effect=force
   response:[
               {
                  "effect": "Great Force",
                  "id": 5,
                  "incantation": "Unknown",
                  "light": "None",
                  "name": "Albus Dumbledore's Forceful Spell",
                  "type": "Spell"
               },
               {
                  "effect": "Forces target to let go",
                  "id": 228,
                  "incantation": "Relashio",
                  "light": "Purple",
                  "name": "Revulsion Jinx",
                  "type": "Jinx"
               },
               {
                  "effect": "Reflects spells and blocks physical forces",
                  "id": 214,
                  "incantation": "Protego",
                  "light": "Invisible on its own, reflects light of spell",
                  "name": "Shield Charm",
                  "type": "Charm"
               }
               ]

REQUEST: /potions
GET parameters
   name (Optional, default: '') -- returns potions with names associated with input string, case insensitively
   effect (Optional, default: '') -- return potions with effects associated with input string, case insensitively
   difficulty (Optional, default: '') -- return potions with the specified difficulty level, case insensitively

RESPONSE:
A list of potions matching the specified GET parameters.
Each potion is a JSON object with keys:
   - characteristics, difficulty_level, effect, id, ingredients, name
Example: 
   request:localhost:5122/potions?effect=induce&difficulty=advanced
   response:[
               {
                  "characteristics": "Sunshine yellow in colour, Sweet, Aromatic, Emits rainbow when finished",
                  "difficulty_level": "Advanced",
                  "effect": "Induces happiness",
                  "id": 31,
                  "ingredients": [
                  "Shrivelfig",
                  "Porcupine quills",
                  "Peppermint sprigs",
                  "Sopophorous beans",
                  "Wormwood"
                  ],
                  "name": "Elixir to Induce Euphoria"
               }
               ]